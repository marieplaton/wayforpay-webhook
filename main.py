from fastapi import FastAPI, Request
import logging
import httpx

app = FastAPI()
logging.basicConfig(level=logging.INFO)

# –•—Ä–∞–Ω–∏–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã)
processed_orders = set()

# üîπ –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π Webhook Make
MAKE_WEBHOOK_URL = "https://hook.eu2.make.com/p9ugnp2wopa4yd2g3mbskexbgkgs6770"

@app.post("/")
async def wayforpay_webhook(request: Request):
    try:
        data = await request.json()
        order_ref = data.get("orderReference")  # ID –∑–∞–∫–∞–∑–∞

        if not order_ref:
            logging.error("Missing orderReference in request data")
            return {"status": "error", "message": "Missing orderReference"}, 400

        if order_ref in processed_orders:
            logging.warning(f"Duplicate request detected: {order_ref}")
            return {"status": "OK"}  # –û—Ç–≤–µ—á–∞–µ–º OK, —á—Ç–æ–±—ã WayForPay –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª

        logging.info(f"Processing new transaction: {order_ref}")

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Make –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º JSON-—Ñ–æ—Ä–º–∞—Ç–µ
        payload = {"json": data}  # –¢–µ–ø–µ—Ä—å Make –ø–æ–ª—É—á–∏—Ç –æ–±—ä–µ–∫—Ç –≤ `json`

        async with httpx.AsyncClient() as client:
            response = await client.post(MAKE_WEBHOOK_URL, json=payload)
            logging.info(f"Response from Make: {response.status_code} {response.text}")

        processed_orders.add(order_ref)

        return {"status": "OK"}  # WayForPay –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    except Exception as e:
        logging.error(f"Error processing request: {e}")
        return {"status": "error", "message": str(e)}, 500